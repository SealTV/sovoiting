// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiser is a mock of Serviser interface.
type MockServiser struct {
	ctrl     *gomock.Controller
	recorder *MockServiserMockRecorder
}

// MockServiserMockRecorder is the mock recorder for MockServiser.
type MockServiserMockRecorder struct {
	mock *MockServiser
}

// NewMockServiser creates a new mock instance.
func NewMockServiser(ctrl *gomock.Controller) *MockServiser {
	mock := &MockServiser{ctrl: ctrl}
	mock.recorder = &MockServiserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiser) EXPECT() *MockServiserMockRecorder {
	return m.recorder
}

// AddVoter mocks base method.
func (m *MockServiser) AddVoter(ctx context.Context, voteID, voterAddres string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVoter", ctx, voteID, voterAddres)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVoter indicates an expected call of AddVoter.
func (mr *MockServiserMockRecorder) AddVoter(ctx, voteID, voterAddres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVoter", reflect.TypeOf((*MockServiser)(nil).AddVoter), ctx, voteID, voterAddres)
}

// CreateVote mocks base method.
func (m *MockServiser) CreateVote(ctx context.Context, ownerAddres string, names []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", ctx, ownerAddres, names)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockServiserMockRecorder) CreateVote(ctx, ownerAddres, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockServiser)(nil).CreateVote), ctx, ownerAddres, names)
}

// DelegateVote mocks base method.
func (m *MockServiser) DelegateVote(ctx context.Context, voteID, voter, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateVote", ctx, voteID, voter, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateVote indicates an expected call of DelegateVote.
func (mr *MockServiserMockRecorder) DelegateVote(ctx, voteID, voter, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateVote", reflect.TypeOf((*MockServiser)(nil).DelegateVote), ctx, voteID, voter, to)
}

// GetProposals mocks base method.
func (m *MockServiser) GetProposals(ctx context.Context, voteID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposals", ctx, voteID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposals indicates an expected call of GetProposals.
func (mr *MockServiserMockRecorder) GetProposals(ctx, voteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposals", reflect.TypeOf((*MockServiser)(nil).GetProposals), ctx, voteID)
}

// GetWinnerName mocks base method.
func (m *MockServiser) GetWinnerName(ctx context.Context, voteID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWinnerName", ctx, voteID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWinnerName indicates an expected call of GetWinnerName.
func (mr *MockServiserMockRecorder) GetWinnerName(ctx, voteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWinnerName", reflect.TypeOf((*MockServiser)(nil).GetWinnerName), ctx, voteID)
}

// Vote mocks base method.
func (m *MockServiser) Vote(ctx context.Context, voteID, voterAddres string, proposalID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", ctx, voteID, voterAddres, proposalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Vote indicates an expected call of Vote.
func (mr *MockServiserMockRecorder) Vote(ctx, voteID, voterAddres, proposalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockServiser)(nil).Vote), ctx, voteID, voterAddres, proposalID)
}
